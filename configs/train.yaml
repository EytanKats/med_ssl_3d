# This version of the YAML uses processed patches
project: /home/suraj/Repositories/DINOv2_3D
run_name: "DINOv2_pretrain_primus"
img_size: [160, 160, 160]
hidden_size: 864
patch_size: [8, 8, 8]

trainer:
  _target_: pytorch_lightning.Trainer
  benchmark: True
  max_epochs: 50
  accelerator: gpu
  strategy: ddp_find_unused_parameters_true
  enable_model_summary: False
  log_every_n_steps: 10
  limit_train_batches: 250
  fast_dev_run: False
  num_sanity_val_steps: 0
  precision: 16-mixed
  devices: 3
  detect_anomaly: False
  sync_batchnorm: True
  logger:
    _target_: pytorch_lightning.loggers.WandbLogger
    project: "dinov2"
    name: "@run_name"
    save_dir: '$"/mnt/data1/suraj/dinov2_experiments/dinov2_pretrain/@run_name"'
  callbacks:
    - _target_: pytorch_lightning.callbacks.ModelCheckpoint
      dirpath: '$"/mnt/data1/suraj/dinov2_experiments/dinov2_pretrain"'
      filename: "dinov2_3d_fixed_{epoch:03d}"
      save_last: True
      every_n_epochs: 1
      save_on_train_epoch_end: True

lightning_module:
    _target_: project.training.DINOv2_3D_LightningModule
    batch_size_per_device: 16
    hidden_size: "%hidden_size"
    ibot_separate_head: True
    base_lr: 0.0002
    layer_decay: 0.9
    gradient_clip_val: 3.0
    teacher_temp_warmup_epochs: 30
    teacher_temp_min: 0.04
    teacher_temp_max: 0.07
    freeze_last_layer_epochs: 1
    projection_dim: 65536
    weight_decay: 0.04
    backbone:

data_module:
  _target_: project.training.DataModule
  num_workers: 12
  batch_size: 2
  pin_memory: True
  drop_last: True
  train_dataset:
    _target_: project.utils.safe_dataset.SafeDataset # Dataset that reshuffles erroneous data! Use carefully as it might skip data 
    dataset:
      _target_: monai.data.Dataset
      data: 
      transform:
          _target_: torchvision.transforms.Compose
          transforms:
            - _target_: monai.transforms.LoadImaged
              keys: ["image"]
              image_only: True
            - _target_: monai.transforms.EnsureChannelFirstd
              keys: ["image"]
            - _target_: monai.transforms.Orientationd
              keys: ["image"]
              axcodes: SPL
            - _target_: monai.transforms.Spacingd
              keys: ["image"]
              pixdim: [1.0, 1.0, 1.0]
              mode: bilinear
            - _target_: monai.transforms.CropForegroundd
              keys: ["image"]
              source_key: "image"
            - _target_: monai.transforms.SpatialPadd
              keys: ["image"]
              spatial_size: "%img_size"
              value: -1024
            - _target_: monai.transforms.ScaleIntensityRanged
              keys: ["image"]
              a_min: -1024
              a_max: 2048
              b_min: 0
              b_max: 1
              clip: True
            - _target_: monai.transforms.RandSpatialCropd
              keys: ["image"]
              roi_size: "%img_size"
            - _target_: torchvision.transforms.Lambda
              lambd: "$lambda x: x['image'].as_tensor()"
            - _target_: project.transforms.dinov2_aug.DINOv2Augmentation3D
              global_view_scale: [0.3, 1.0]
              global_view_size: "$@img_size[0]"
              local_view_scale: [0.3, 1.0]
              local_view_size: "$@img_size[0]//2"
              num_local_views: 0 # No local views for now, we need to add suport for interpolated position embeddings
            - _target_: torchvision.transforms.Lambda
              lambd: "$lambda x: (x, False)" # Incase you need labels.
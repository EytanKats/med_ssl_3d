# This version of the YAML uses processed patches
project: /home/eytan/projects/medical_ssl_3d
#run_name: "dinov2_pretrain_primus_freeze0_patchsize8_batch1_accumgrad5_lr0.001_momentum0.994_steps2500K_iBOT_proj65536_tempwarmup750K0.04-0.55_valnako"
#run_name: "patch_8"
run_name: "test"

trainer:
  _target_: pytorch_lightning.Trainer
  benchmark: True
  max_epochs: 1000
  accelerator: gpu
  enable_model_summary: False
  log_every_n_steps: 10
  limit_train_batches: 50
  fast_dev_run: False
  num_sanity_val_steps: 0
  check_val_every_n_epoch: 10
  precision: 16-mixed
  detect_anomaly: False
  logger:
    _target_: pytorch_lightning.loggers.WandbLogger
    project: "medical_ssl_3d"
    name: "@run_name"
    save_dir: "$'/home/eytan/storage/staff/eytankats/projects/medssl3d/experiments/' + @run_name + '/wandblogs'"
  callbacks:
    - _target_: pytorch_lightning.callbacks.ModelCheckpoint
      dirpath: "$'/home/eytan/storage/staff/eytankats/projects/medssl3d/experiments/' + @run_name + '/checkpoints'"
      filename: "best-{epoch:03d}-{val_dice:.4f}"
      monitor: 'val_dice'
      mode: 'max'
      save_top_k: 1
      save_last: True
      every_n_epochs: 5

lightning_module:
    _target_: project.training.lightning_module_linsearseg.SegmentationModule
    lr: 0.001
    num_classes: 5
    ckpt_path: '/home/eytan/storage/staff/eytankats/projects/medssl3d/experiments/patch_4/checkpoints/model_epoch=1534.ckpt'

data_module:
  _target_: project.training.data_module.DataModule
  num_workers: 4
  batch_size: 2
  pin_memory: True
  drop_last: True
  train_dataset:
    _target_: project.utils.safe_dataset.SafeDataset
    dataset:
      _target_: monai.data.Dataset
      data:
      transform:
          _target_: torchvision.transforms.Compose
          transforms:
            - _target_: monai.transforms.LoadImaged
              keys: ["image", "label"]
              image_only: True
            - _target_: monai.transforms.EnsureChannelFirstd
              keys: ["image", "label"]
            - _target_: monai.transforms.ScaleIntensityRangePercentilesd
              keys: ["image"]
              lower: 1
              upper: 99
              b_min: 0.0
              b_max: 1.0
              clip: True
            - _target_: monai.transforms.RandSpatialCropd
              keys: ["image", "label"]
              roi_size: [128, 128, 128]
              random_size: False
#            RandFlipd(keys=["image", "label"], prob=0.5, spatial_axis=[0, 1, 2]),
#            RandRotate90d(keys=["image", "label"], prob=0.5, max_k=3),
#            RandAffined(
#            keys=["image", "label"],
#            prob=0.3,
#            rotate_range=(0.1, 0.1, 0.1),
#            scale_range=(0.1, 0.1, 0.1),
#            mode=("bilinear", "nearest")
#            ),
#            RandGaussianNoised(keys=["image"], prob=0.2, mean=0.0, std=0.05),
#            RandGaussianSmoothd(keys=["image"], prob=0.15, sigma_x=(0.5, 1.0)),
#            RandAdjustContrastd(keys=["image"], prob=0.3, gamma=(0.7, 1.5)),
#            RandShiftIntensityd(keys=["image"], offsets=(-0.1, 0.1), prob=0.5),
#            RandCoarseDropoutd(
#            keys=["image"],
#            holes=5,
#            spatial_size=(16, 16, 16),
#            fill_value=0.0,
#            prob=0.2,
#            ),
            - _target_: monai.transforms.ToTensord
              keys: ["image", "label"]
  val_dataset:
    _target_: project.utils.safe_dataset.SafeDataset # Dataset that reshuffles erroneous data! Use carefully as it might skip data
    dataset:
      _target_: monai.data.Dataset
      data:
      transform:
        _target_: torchvision.transforms.Compose
        transforms:
          - _target_: monai.transforms.LoadImaged
            keys: [ "image", "label" ]
            image_only: True
          - _target_: monai.transforms.EnsureChannelFirstd
            keys: [ "image", "label" ]
          - _target_: monai.transforms.ScaleIntensityRangePercentilesd
            keys: [ "image" ]
            lower: 1
            upper: 99
            b_min: 0.0
            b_max: 1.0
            clip: True
          - _target_: monai.transforms.ToTensord
            keys: [ "image", "label" ]